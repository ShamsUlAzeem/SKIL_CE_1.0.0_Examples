{"paragraphs":[{"text":"import org.apache.commons.lang3.tuple.ImmutablePair\nimport org.apache.commons.lang3.tuple.Pair\nimport org.nd4j.linalg.activations.Activation\nimport org.nd4j.linalg.dataset.api.iterator.DataSetIterator\nimport org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator\nimport org.deeplearning4j.nn.api.OptimizationAlgorithm\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration\nimport org.deeplearning4j.nn.conf.Updater\nimport org.deeplearning4j.nn.conf.layers.DenseLayer\nimport org.deeplearning4j.nn.conf.layers.OutputLayer\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork\nimport org.deeplearning4j.nn.weights.WeightInit\nimport org.deeplearning4j.optimize.api.IterationListener\nimport org.deeplearning4j.optimize.listeners.ScoreIterationListener\nimport org.nd4j.linalg.api.ndarray.INDArray\nimport org.nd4j.linalg.dataset.DataSet\nimport org.nd4j.linalg.factory.Nd4j\nimport org.nd4j.linalg.lossfunctions.LossFunctions\nimport javax.swing._\nimport java.awt._\nimport java.awt.image.BufferedImage\nimport java.util._\nimport java.util\n\nimport scala.collection.JavaConversions._\n\nimport org.nd4j.linalg.learning.config._\n\nimport io.skymind.modelproviders.history.client.ModelHistoryClient\nimport io.skymind.modelproviders.history.model.ModelInstance\nimport io.skymind.modelproviders.history.model.EvaluationResults\n\n","user":"admin","dateUpdated":"2017-10-19T15:31:21+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport org.apache.commons.lang3.tuple.ImmutablePair\n\nimport org.apache.commons.lang3.tuple.Pair\n\nimport org.nd4j.linalg.activations.Activation\n\nimport org.nd4j.linalg.dataset.api.iterator.DataSetIterator\n\nimport org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator\n\nimport org.deeplearning4j.nn.api.OptimizationAlgorithm\n\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration\n\nimport org.deeplearning4j.nn.conf.Updater\n\nimport org.deeplearning4j.nn.conf.layers.DenseLayer\n\nimport org.deeplearning4j.nn.conf.layers.OutputLayer\n\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork\n\nimport org.deeplearning4j.nn.weights.WeightInit\n\nimport org.deeplearning4j.optimize.api.IterationListener\n\nimport org.deeplearning4j.optimize.listeners.ScoreIterationListener\n\nimport org.nd4j.linalg.api.ndarray.INDArray\n\nimport org.nd4j.linalg.dataset.DataSet\n\nimport org.nd4j.linalg.factory.Nd4j\n\nimport org.nd4j.linalg.lossfunctions.LossFunctions\n\nimport javax.swing._\n\nimport java.awt._\n\nimport java.awt.image.BufferedImage\n\nimport java.util._\n\nimport java.util\n\nimport scala.collection.JavaConversions._\n\nimport org.nd4j.linalg.learning.config._\n\nimport io.skymind.modelproviders.history.client.ModelHistoryClient\n\nimport io.skymind.modelproviders.history.model.ModelInstance\n\nimport io.skymind.modelproviders.history.model.EvaluationResults\n"}]},"apps":[],"jobName":"paragraph_1508426502420_-1482749141","id":"20171019-152142_1627845728","dateCreated":"2017-10-19T15:21:42+0000","dateStarted":"2017-10-19T15:31:21+0000","dateFinished":"2017-10-19T15:31:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:294"},{"text":"val conf = new NeuralNetConfiguration.Builder()\n    .seed(12345)\n    .iterations(1)\n    .weightInit(WeightInit.XAVIER)\n    .updater(new AdaGrad(0.05))\n    .activation(Activation.RELU)\n    .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT)\n    .l2(0.0001)\n    .list()\n    .layer(0, new DenseLayer.Builder().nIn(784).nOut(250)\n            .build())\n    .layer(1, new DenseLayer.Builder().nIn(250).nOut(128)\n            .build())\n    .layer(2, new OutputLayer.Builder().nIn(128).nOut(10)\n            .activation(Activation.SOFTMAX)\n            .lossFunction(LossFunctions.LossFunction.MCXENT)\n            .build())\n    .pretrain(false)\n    .backprop(true)\n    .build()\n    \n    \nval net = new MultiLayerNetwork(conf)\nnet.setListeners(new ScoreIterationListener(1))","user":"admin","dateUpdated":"2017-10-19T16:43:57+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconf: org.deeplearning4j.nn.conf.MultiLayerConfiguration =\n{\n  \"backprop\" : true,\n  \"backpropType\" : \"Standard\",\n  \"cacheMode\" : \"NONE\",\n  \"confs\" : [ {\n    \"cacheMode\" : \"NONE\",\n    \"epochCount\" : 0,\n    \"iterationCount\" : 0,\n    \"l1ByParam\" : { },\n    \"l2ByParam\" : { },\n    \"layer\" : {\n      \"dense\" : {\n        \"activationFn\" : {\n          \"ReLU\" : { }\n        },\n        \"biasInit\" : 0.0,\n        \"biasUpdater\" : null,\n        \"constraints\" : null,\n        \"dist\" : null,\n        \"gradientNormalization\" : \"None\",\n        \"gradientNormalizationThreshold\" : 1.0,\n        \"hasBias\" : true,\n        \"idropout\" : null,\n        \"iupdater\" : {\n          \"@class\" : \"org.nd4j.linalg.learning.config.AdaGrad\",\n          \"epsilon\" : 1.0E-6,\n          \"learningRate\" : 0.05\n        },\n        \"l1\" : 0....\nnet: org.deeplearning4j.nn.multilayer.MultiLayerNetwork = org.deeplearning4j.nn.multilayer.MultiLayerNetwork@4feac07\n"}]},"apps":[],"jobName":"paragraph_1508426540640_816018268","id":"20171019-152220_2134241087","dateCreated":"2017-10-19T15:22:20+0000","dateStarted":"2017-10-19T16:37:15+0000","dateFinished":"2017-10-19T16:37:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:295"},{"text":"//Load data and split into training and testing sets. 40000 train, 10000 test\nval iter = new MnistDataSetIterator(100,100,false)\n\nval featuresTrain = new util.ArrayList[INDArray]\nval featuresTest = new util.ArrayList[INDArray]\nval labelsTest = new util.ArrayList[INDArray]\n\nval rand = new util.Random(12345)\n\nwhile(iter.hasNext()){\n    val next = iter.next()\n    val split = next.splitTestAndTrain(80, rand)  //80/20 split (from miniBatch = 100)\n    featuresTrain.add(split.getTrain().getFeatureMatrix())\n    val dsTest = split.getTest()\n    featuresTest.add(dsTest.getFeatureMatrix())\n    val indexes = Nd4j.argMax(dsTest.getLabels(),1) //Convert from one-hot representation -> index\n    labelsTest.add(indexes)\n}","user":"admin","dateUpdated":"2017-10-19T15:29:12+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\niter: org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator = org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator@54281e03\n\nfeaturesTrain: java.util.ArrayList[org.nd4j.linalg.api.ndarray.INDArray] = []\n\nfeaturesTest: java.util.ArrayList[org.nd4j.linalg.api.ndarray.INDArray] = []\n\nlabelsTest: java.util.ArrayList[org.nd4j.linalg.api.ndarray.INDArray] = []\n\nrand: java.util.Random = java.util.Random@11aa8e1\n"}]},"apps":[],"jobName":"paragraph_1508426557231_-1073853005","id":"20171019-152237_1160129929","dateCreated":"2017-10-19T15:22:37+0000","dateStarted":"2017-10-19T15:29:12+0000","dateFinished":"2017-10-19T15:29:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:296"},{"text":"// the \"simple\" way to do multiple epochs is to wrap fit() in a loop\nval nEpochs = 2\nfor (epoch <- 1 to nEpochs) {\n    iter.reset()\n    net.fit(iter)\n\n    println(\"Epoch \" + epoch + \" complete\");\n}","user":"admin","dateUpdated":"2017-10-19T16:43:57+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nnEpochs: Int = 2\nEpoch 1 complete\nEpoch 2 complete\n"}]},"apps":[],"jobName":"paragraph_1508426600872_1454209424","id":"20171019-152320_1040761957","dateCreated":"2017-10-19T15:23:20+0000","dateStarted":"2017-10-19T16:38:58+0000","dateFinished":"2017-10-19T16:39:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:297"},{"text":"val evalTrain = net.evaluate(iter)\nval evalTest = net.evaluate(new MnistDataSetIterator(100,100,true))","user":"admin","dateUpdated":"2017-10-19T16:43:57+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nevalTrain: org.deeplearning4j.eval.Evaluation =\n\nExamples labeled as 0 classified by model as 0: 13 times\nExamples labeled as 1 classified by model as 0: 1 times\nExamples labeled as 1 classified by model as 1: 4 times\nExamples labeled as 1 classified by model as 3: 1 times\nExamples labeled as 1 classified by model as 8: 8 times\nExamples labeled as 2 classified by model as 0: 2 times\nExamples labeled as 2 classified by model as 2: 2 times\nExamples labeled as 2 classified by model as 3: 1 times\nExamples labeled as 2 classified by model as 8: 1 times\nExamples labeled as 3 classified by model as 0: 5 times\nExamples labeled as 3 classified by model as 3: 3 times\nExamples labeled as 3 classified by model as 8: 3 times\nExamples labeled as 4 classified by model as 0: 1 times\nExamples labeled as...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nevalTest: org.deeplearning4j.eval.Evaluation =\n\nExamples labeled as 0 classified by model as 0: 13 times\nExamples labeled as 1 classified by model as 1: 2 times\nExamples labeled as 1 classified by model as 3: 2 times\nExamples labeled as 1 classified by model as 5: 2 times\nExamples labeled as 1 classified by model as 7: 2 times\nExamples labeled as 1 classified by model as 8: 6 times\nExamples labeled as 2 classified by model as 0: 2 times\nExamples labeled as 2 classified by model as 2: 3 times\nExamples labeled as 2 classified by model as 3: 1 times\nExamples labeled as 3 classified by model as 0: 3 times\nExamples labeled as 3 classified by model as 3: 6 times\nExamples labeled as 3 classified by model as 8: 2 times\nExamples labeled as 4 classified by model as 0: 2 times\nExamples labeled as ..."}]},"apps":[],"jobName":"paragraph_1508431159883_186912703","id":"20171019-163919_153963645","dateCreated":"2017-10-19T16:39:19+0000","dateStarted":"2017-10-19T16:40:53+0000","dateFinished":"2017-10-19T16:40:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:298"},{"text":"// Get some basics setup\nval modelHistoryServer = \"http://localhost:9100\"\nval experimentId = \"9199e775-5444-4e59-a415-09bc86a055cd\" // needs to match the experiment ID, injected into notebook\nvar modelLabels = \"anomaly test notebook model\"\nvar deploymentUri = \"http://localhost\"\n","user":"admin","dateUpdated":"2017-10-19T18:31:20+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nmodelHistoryServer: String = http://localhost:9100\n\nexperimentId: String = 9199e775-5444-4e59-a415-09bc86a055cd\n\nmodelLabels: String = anomaly test notebook model\n\ndeploymentUri: String = http://localhost\n"}]},"apps":[],"jobName":"paragraph_1508426662518_-893284822","id":"20171019-152422_1691618617","dateCreated":"2017-10-19T15:24:22+0000","dateStarted":"2017-10-19T18:31:20+0000","dateFinished":"2017-10-19T18:31:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:299"},{"text":"// Connect to the Model History Service\nval modelHistoryClient = new ModelHistoryClient(modelHistoryServer)\nval modelExperiment = modelHistoryClient.experimentWithId(experimentId)\nval modelName = \"SKIL Test - Anomaly Model \" // v%d\".format(System.currentTimeMillis() / 1000)\n\n// Create a reference to our newly trained model\nval modelInstance = ModelInstance.builder()\n                .modelId(UUID.randomUUID().toString())\n                .modelLabels(modelLabels)\n                .uri(deploymentUri)\n                .experimentId(modelExperiment.getExperimentId())\n                .created(new Date(System.currentTimeMillis()))\n                .modelName(modelName)\n                .build();\n\n// Add this model to the history                \nmodelHistoryClient.addModelInstance(modelInstance)\n","user":"admin","dateUpdated":"2017-10-19T18:31:26+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nmodelHistoryClient: io.skymind.modelproviders.history.client.ModelHistoryClient = io.skymind.modelproviders.history.client.ModelHistoryClient@6d24a734\n\nmodelExperiment: io.skymind.modelproviders.history.model.Experiment = Experiment(bestModelId=9f21a49f-60c8-4161-87f3-a71cb163ea1a, inputDataUri=null, experimentId=9199e775-5444-4e59-a415-09bc86a055cd, experimentName=Anomaly Detection Experiment [thurs], experimentDescription=null, notebookJson=null, notebookUrl=http://localhost:8080/#/notebook/2CUVX14GB, zeppelinId=2CUVX14GB, modelHistoryId=355b3f23-2fa8-4a93-bbca-8ceadc0ac312, lastUpdated=null)\n\nmodelName: String = \"SKIL Test - Anomaly Model \"\n\nmodelInstance: io.skymind.modelproviders.history.model.ModelInstance = ModelInstance(uri=http://localhost, etlJson=null, modelId=10331c5f-0ae4-4f79-949e-ee4b2fd0e940, modelLabels=anomaly test notebook model, inputFormats=null, created=Thu Oct 19 18:31:28 UTC 2017, notebookJson=null, evalId=null, modelName=SKIL Test - Anomaly Model , originalModelId=null, modelVersion=null, experimentId=9199e775-5444-4e59-a415-09bc86a055cd)\n"}]},"apps":[],"jobName":"paragraph_1508427762085_-1718989376","id":"20171019-154242_1605334377","dateCreated":"2017-10-19T15:42:42+0000","dateStarted":"2017-10-19T18:31:26+0000","dateFinished":"2017-10-19T18:31:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:300"},{"text":"\n// Grab the training evals and save them\nfor (evaluation <- Seq(evalTrain, evalTest)) {\n    val evaluationResults = EvaluationResults.create(evaluation)\n\n    evaluationResults.setModelInstanceId(modelInstance.getModelId())\n    evaluationResults.setEvalId(UUID.randomUUID().toString())\n    evaluationResults.setCreated(new Date(System.currentTimeMillis()))\n    modelHistoryClient.addEvaluationResults(evaluationResults)\n}\n","user":"admin","dateUpdated":"2017-10-19T18:31:32+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1508427773030_-353115456","id":"20171019-154253_978943866","dateCreated":"2017-10-19T15:42:53+0000","dateStarted":"2017-10-19T18:31:32+0000","dateFinished":"2017-10-19T18:31:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:301"},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1508429637620_956835768","id":"20171019-161357_84641575","dateCreated":"2017-10-19T16:13:57+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:302"}],"name":"anom_detection_exp_thurs_jp","id":"2CUVX14GB","angularObjects":{"2CXRQEF1A:existing_process":[],"2CVBDUDAF:existing_process":[],"2CWXTM3XH:existing_process":[],"2CWT1T2QT:existing_process":[],"2CX5AMTV9:existing_process":[],"2CWTNTEV5:existing_process":[],"2CYF8RCCT:existing_process":[],"2CUZU83HM:existing_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}