{"paragraphs":[{"text":"%spark\n\nimport org.nd4j.linalg.activations.Activation\nimport org.nd4j.linalg.dataset.api.iterator.DataSetIterator\nimport org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator\nimport org.deeplearning4j.eval.Evaluation\nimport org.deeplearning4j.nn.api.OptimizationAlgorithm\nimport org.deeplearning4j.nn.conf.MultiLayerConfiguration\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration\nimport org.deeplearning4j.nn.conf.Updater\nimport org.deeplearning4j.nn.conf.layers.DenseLayer\nimport org.deeplearning4j.nn.conf.layers.OutputLayer\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork\nimport org.deeplearning4j.nn.weights.WeightInit\nimport org.deeplearning4j.optimize.listeners.ScoreIterationListener\nimport org.nd4j.linalg.api.ndarray.INDArray\nimport org.nd4j.linalg.dataset.DataSet\nimport org.nd4j.linalg.lossfunctions.LossFunctions.LossFunction\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\n\nimport io.skymind.modelproviders.history.client.ModelHistoryClient\nimport io.skymind.modelproviders.history.model.ModelInstance\nimport io.skymind.modelproviders.history.model.EvaluationResults\n\n\n","user":"admin","dateUpdated":"2017-10-17T18:43:58+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport org.nd4j.linalg.activations.Activation\n\nimport org.nd4j.linalg.dataset.api.iterator.DataSetIterator\n\nimport org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator\n\nimport org.deeplearning4j.eval.Evaluation\n\nimport org.deeplearning4j.nn.api.OptimizationAlgorithm\n\nimport org.deeplearning4j.nn.conf.MultiLayerConfiguration\n\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration\n\nimport org.deeplearning4j.nn.conf.Updater\n\nimport org.deeplearning4j.nn.conf.layers.DenseLayer\n\nimport org.deeplearning4j.nn.conf.layers.OutputLayer\n\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork\n\nimport org.deeplearning4j.nn.weights.WeightInit\n\nimport org.deeplearning4j.optimize.listeners.ScoreIterationListener\n\nimport org.nd4j.linalg.api.ndarray.INDArray\n\nimport org.nd4j.linalg.dataset.DataSet\n\nimport org.nd4j.linalg.lossfunctions.LossFunctions.LossFunction\n\nimport org.slf4j.Logger\n\nimport org.slf4j.LoggerFactory\n\nimport io.skymind.modelproviders.history.client.ModelHistoryClient\n\nimport io.skymind.modelproviders.history.model.ModelInstance\n\nimport io.skymind.modelproviders.history.model.EvaluationResults\n"}]},"apps":[],"jobName":"paragraph_1508265093761_887563375","id":"20171017-183133_1864270377","dateCreated":"2017-10-17T18:31:33+0000","dateStarted":"2017-10-17T18:43:58+0000","dateFinished":"2017-10-17T18:44:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:273"},{"text":"%spark\n\n//number of rows and columns in the input pictures\nval numRows = 28\nval numColumns = 28\nval outputNum = 10 // number of output classes\nval batchSize = 128 // batch size for each epoch\nval rngSeed = 123 // random number seed for reproducibility\nval numEpochs = 15 // number of epochs to perform\n\n// Get some basics setup\nval modelHistoryServer = \"http://localhost:9100\"\nval experimentId = \"d98cef95-d0f4-41db-a778-6b5fe11b6f79\"\nvar modelLabels = \"sensor trend classification\"\nvar deploymentUri = \"http://localhost\"\n\n\n\nval conf: MultiLayerConfiguration = new NeuralNetConfiguration.Builder()\n    .seed(rngSeed) //include a random seed for reproducibility\n    .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT) // use stochastic gradient descent as an optimization algorithm\n    .iterations(1) // in nearly all cases should be 1\n    .learningRate(0.006) //specify the learning rate\n    .updater(Updater.NESTEROVS).momentum(0.9) //specify the rate of change of the learning rate.\n    .regularization(true).l2(1e-4)\n    .list()\n    .layer(0, new DenseLayer.Builder() //create the first, input layer with xavier initialization\n            .nIn(numRows * numColumns)\n            .nOut(1000)\n            .activation(Activation.RELU)\n            .weightInit(WeightInit.XAVIER)\n            .build())\n    .layer(1, new OutputLayer.Builder(LossFunction.NEGATIVELOGLIKELIHOOD) //create hidden layer\n            .nIn(1000)\n            .nOut(outputNum)\n            .activation(Activation.SOFTMAX)\n            .weightInit(WeightInit.XAVIER)\n            .build())\n    .build()\n\nval model = new MultiLayerNetwork(conf)\nmodel.init()\n//print the score with every 1 iteration\nmodel.setListeners(new ScoreIterationListener(1))\n\n","user":"admin","dateUpdated":"2017-10-17T18:33:17+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\nnumRows: Int = 28\n\nnumColumns: Int = 28\n\noutputNum: Int = 10\n\nbatchSize: Int = 128\n\nrngSeed: Int = 123\n\nnumEpochs: Int = 15\n\nwarning: there were two deprecation warnings; re-run with -deprecation for details\n\n\n\n\n\n\n\n\njava.lang.NoSuchMethodError: org.nd4j.linalg.learning.config.IUpdater.applySchedules(ID)V\n  at org.deeplearning4j.nn.conf.layers.LayerValidation.updaterValidation(LayerValidation.java:85)\n  at org.deeplearning4j.nn.conf.layers.LayerValidation.updaterValidation(LayerValidation.java:35)\n  at org.deeplearning4j.nn.conf.NeuralNetConfiguration$Builder.copyConfigToLayer(NeuralNetConfiguration.java:1378)\n  at org.deeplearning4j.nn.conf.NeuralNetConfiguration$Builder.configureLayer(NeuralNetConfiguration.java:1318)\n  at org.deeplearning4j.nn.conf.NeuralNetConfiguration$Builder.build(NeuralNetConfiguration.java:1301)\n  at org.deeplearning4j.nn.conf.NeuralNetConfiguration$ListBuilder.build(NeuralNetConfiguration.java:304)\n  ... 46 elided\n"}]},"apps":[],"jobName":"paragraph_1508265149623_-1802323455","id":"20171017-183229_1669380202","dateCreated":"2017-10-17T18:32:29+0000","dateStarted":"2017-10-17T18:33:17+0000","dateFinished":"2017-10-17T18:33:19+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:274"},{"text":"%spark\n\n//Get the DataSetIterators:\nval mnistTrain = new MnistDataSetIterator(batchSize, true, rngSeed)\nval mnistTest = new MnistDataSetIterator(batchSize, false, rngSeed)\n","user":"admin","dateUpdated":"2017-10-17T18:33:17+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1508265197203_833419405","id":"20171017-183317_698445895","dateCreated":"2017-10-17T18:33:17+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:275"},{"text":"%spark\n\n// the \"simple\" way to do multiple epochs is to wrap fit() in a loop\n(1 to numEpochs).foreach(_ => model.fit(mnistTrain) )\n","user":"admin","dateUpdated":"2017-10-17T18:39:51+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1508265591134_1910718493","id":"20171017-183951_241571291","dateCreated":"2017-10-17T18:39:51+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:484"},{"text":"%spark\nval evaluation = model.evaluate(mnistTest)\n\n// print the basic statistics about the trained classifier\nprintln(\"Accuracy: \"+evaluation.accuracy())\nprintln(\"Precision: \"+evaluation.precision())\nprintln(\"Recall: \"+evaluation.recall())\n\n// in more complex scenarios, a confusion matrix is quite helpful\nprintln(evaluation.confusionToString())\n","user":"admin","dateUpdated":"2017-10-17T18:40:41+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1508265641146_-1359769751","id":"20171017-184041_1027943816","dateCreated":"2017-10-17T18:40:41+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:558"},{"text":"%spark\n// Connect to the Model History Service\nval modelHistoryClient = new ModelHistoryClient(modelHistoryServer)\nval modelExperiment = modelHistoryClient.experimentWithId(experimentId)\nval modelName = \"Sensor Trend Classification v%d\".format(System.currentTimeMillis() / 1000)\n\n// Create a reference to our newly trained model\nval modelInstance = ModelInstance.builder()\n                .modelId(UUID.randomUUID().toString())\n                .modelLabels(modelLabels)\n                .uri(deploymentUri)\n                .experimentId(modelExperiment.getExperimentId())\n                .created(new Date(System.currentTimeMillis()))\n                .modelName(modelName)\n                .build();\n\n// Add this model to the history                \nmodelHistoryClient.addModelInstance(modelInstance)\n\n// Grab the training evals and save them\nfor (evaluation <- modelAndEval.getTestEvals()) {\n    val evaluationResults = EvaluationResults.create(evaluation)\n\n    evaluationResults.setModelInstanceId(modelInstance.getModelId())\n    evaluationResults.setEvalId(UUID.randomUUID().toString())\n    evaluationResults.setCreated(new Date(System.currentTimeMillis()))\n    modelHistoryClient.addEvaluationResults(evaluationResults)\n}\n","user":"admin","dateUpdated":"2017-10-17T18:44:45+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1508265885341_716841012","id":"20171017-184445_425827923","dateCreated":"2017-10-17T18:44:45+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:667"}],"name":"DL_MNIST_Notebook","id":"2CXXJQTWQ","angularObjects":{"2CV1MBCSJ:existing_process":[],"2CWHR3BDG:existing_process":[],"2CX6S8JUS:existing_process":[],"2CYCFT3K8:existing_process":[],"2CWFS5G1Y:existing_process":[],"2CVTBAV58:existing_process":[],"2CVWDPJ88:existing_process":[],"2CVR484KK:existing_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{},"checkpoint":{"message":"full template draft, not tested"}}